import os
import random
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
)
import asyncio

# --- –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–∞–Ω–¥ ---
ECHO_ALIASES = {"echo", "–ø—Ä–æ–≤–µ—Ä–∫–∞", "test", "—ç—Ö–æ", "check"}
START_ALIASES = {"start", "–∫–æ–Ω—Ç–∞–∫—Ç", "—Å—Ç–∞—Ä—Ç"}
LOG_ALIASES = {"log", "–ª–æ–≥", "—Ç—Ä–∞—Ñ–∏–∫"}
PULSE_ALIASES = {"pulse", "–º–∞—Ä—à—Ä—É—Ç", "–≤—ã–±–æ—Ä"}
CODE_ALIASES = {"code", "–∫–æ–¥", "–∫–ª—é—á"}
ARCHIVE_ALIASES = {"archive", "–∞—Ä—Ö–∏–≤", "—Å—Ç–∞—Ä–æ–µ"}
CAST_ALIASES = {"cast", "–ø–µ—Ä–µ–¥–∞—Ç—å", "—Å–∏–≥–Ω–∞–ª"}
HELP_ALIASES = {"help", "–ø–æ–º–æ—â—å", "—Å–ø—Ä–∞–≤–∫–∞"}
SCAN_ALIASES = {"scan", "—Å–∫–∞–Ω", "–∏—Å–∫–∞—Ç—å"}

ADMIN_IDS = {642787882}
LOG_HISTORY = []
ARCHIVE_PAGE_SIZE = 5

RESPONSES = {
    "start": [
        "–õ–∏–Ω–∏—è —Å–≤—è–∑–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ—Ä–º–∏–Ω–∞–ª –∞–∫—Ç–∏–≤–µ–Ω. –≠—Ñ–∏—Ä —à–µ–ø—á–µ—Ç.",
        "–°–∏–≥–Ω–∞–ª –∑–∞—Ö–≤–∞—á–µ–Ω. –¢—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–π –∫–∞–Ω–∞–ª.",
        "RX: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ. –°–ª—É—à–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ."
    ],
    "echo": [
        "–°–≤—è–∑—å —Å—Ç–∞–±–∏–ª—å–Ω–∞. –£—Ä–æ–≤–µ–Ω—å —à—É–º–∞: 2.1 –¥–ë. –ü—Ä–æ–¥–æ–ª–∂–∞–π.",
        "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω. –≠—Ö–æ –æ—Ç—Ä–∞–∂–µ–Ω–æ. –ö–∞–Ω–∞–ª —á–∏—Å—Ç.",
        "–ü—É–ª—å—Å–∞—Ü–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞. –û—Ç–≥–æ–ª–æ—Å–æ–∫ –ø—Ä–∏–Ω—è—Ç.",
        "–°–≤—è–∑—å —Å—Ç–∞–±–∏–ª—å–Ω–∞. –£—Ä–æ–≤–µ–Ω—å —à—É–º–∞: 2.3 –¥–ë. –ü—Ä–∏—ë–º –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.",
        "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω. –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
        "–ö–∞–Ω–∞–ª –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –ß—É–∂–æ–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ —á–∞—Å—Ç–æ—Ç–µ 147.9 –ú–ì—Ü.",
        "–®–æ—Ä–æ—Ö –Ω–∞ –ª–∏–Ω–∏–∏. –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —ç—Ç–æ –±—ã–ª —Ç–µ—Å—Ç?",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–æ —ç—Ö–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∑–≤—É—á–∞—Ç—å.",
        "RX: –≤–æ–∑–≤—Ä–∞—Ç —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ò—Å—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç."
    ],
    "log": [
        "–õ–û–ì –ø—Ä–∏–Ω—è—Ç: (–ø–æ—Å—Ç –õ–æ–≥–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞). –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
        "–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {–ª–æ–≥}.",
        "–°–∏–≥–Ω–∞–ª —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω. –¢—Ä–∞–Ω—Å–ª–∏—Ä—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å‚Ä¶"
    ],
    "pulse": [
        "–í–∞—Ä–∏–∞–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –†–µ—à–∞–π, –ø–æ–∫–∞ —ç—Ñ–∏—Ä –Ω–µ —Å–æ—Ä–≤–∞–ª—Å—è.",
        "–ü—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ ‚Äî —É–∂–µ –¥–≤–∏–∂–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏ –ø—É—Ç—å.",
        "–°–µ–∫—Ç–æ—Ä —Ä–∞–∑–≤–µ—Ç–≤–ª—ë–Ω. –£–∫–∞–∂–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: [–≤–ø–µ—Ä—ë–¥ | –æ—Å—Ç–∞—Ç—å—Å—è | –≤–µ—Ä–Ω—É—Ç—å—Å—è]."
    ],
    "code_true": [
        "–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª ‚àÜ-209A. –û–∂–∏–¥–∞–π –æ—Ç–∫–ª–∏–∫–∞.",
        "–î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å.",
        "–°–∏–≥–Ω–∞–ª –ø—Ä–∏–Ω—è—Ç. –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –Ω–µ –¥–ª—è –≤—Å–µ—Ö."
    ],
    "code_false": [
        "–û—à–∏–±–∫–∞. –ö–æ–¥ –æ—Ç—Ä–∏—Ü–∞–µ—Ç—Å—è —ç—Ñ–∏—Ä–æ–º.",
        "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –û—Ç–∫–∞–∑ –¥–æ—Å—Ç—É–ø–∞.",
        "RX: –∫–ª—é—á –Ω–µ –ø—Ä–∏–Ω—è—Ç. –°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω."
    ],
    "archive": [
        "–û—Ç–∫—Ä—ã—Ç –∞—Ä—Ö–∏–≤. –ü–µ—Ä–µ–¥–∞—á–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–±–µ—Ä–∏.",
        "–î–æ—Å—Ç—É–ø –∫ –∞—Ä—Ö–∏–≤—É —Ä–∞–∑—Ä–µ—à—ë–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —à–∏—Ñ—Ä—É—é—Ç—Å—è –¥–æ —Å–∏—Ö –ø–æ—Ä.",
        "–ê—Ä—Ö–∏–≤ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω. –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∂–¥—É—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏."
    ],
    "cast_start": [
        "–¢–µ—Ä–º–∏–Ω–∞–ª –≥–æ—Ç–æ–≤. –ü–µ—Ä–µ–¥–∞–π, —á—Ç–æ —Ç—ã —Å–ª—ã—à–∞–ª –∏–ª–∏ –≤–∏–¥–µ–ª.",
        "–≠—Ñ–∏—Ä –æ—Ç–∫—Ä—ã—Ç –¥–ª—è —Ç–≤–æ–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞. –ì–æ–≤–æ—Ä–∏.",
        "–ù–∞—á–Ω–∏ –ø–µ—Ä–µ–¥–∞—á—É. –ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–º –µ—ë."
    ],
    "cast_done": [
        "–ü—Ä–∏–Ω—è—Ç–æ. –¢–≤–æ—è –∑–∞–ø–∏—Å—å –≤–æ—à–ª–∞ –≤ —ç—Ñ–∏—Ä. –ö—Ç–æ-—Ç–æ —É—Å–ª—ã—à–∏—Ç.",
        "–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ù–∞–∑–Ω–∞—á–µ–Ω –∫–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏.",
        "–ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –®–æ—Ä–æ—Ö —Å–æ—Ö—Ä–∞–Ω–∏—Ç."
    ],
    "help": [
        "–ö–æ–º–∞–Ω–¥—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã. –ó–∞–ø—Ä–æ—Å—ã —Å–ª—É—à–∞—é—Ç—Å—è.",
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã: /log /cast /pulse /echo /code /archive /start /scan.",
        "–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–º–∞–Ω–¥—ã. –≠—Ç–æ –∫–ª—é—á–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö —Å —É–º–æ–º."
    ]
}

START_REPLY_OPTIONS = [["/help", "/echo"], ["/log", "/cast"]]
CODE = os.environ.get("SECRET_CODE", "209A")
USER_STATE = {}

def pick(key, extra=None):
    resp = random.choice(RESPONSES[key])
    if extra:
        resp = resp.replace("{–ª–æ–≥}", extra)
    return resp

# –ö–æ–º–∞–Ω–¥—ã —Å /
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(START_REPLY_OPTIONS, resize_keyboard=True)
    await update.message.reply_text(pick("start"), reply_markup=reply_markup)

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(pick("echo"))

async def code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    parts = update.message.text.split(maxsplit=1)
    if len(parts) == 2 and parts[1].strip().upper() == CODE:
        await update.message.reply_text(pick("code_true"))
    else:
        await update.message.reply_text(pick("code_false"))

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞:\n"
        "üì° /start ‚Äî –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —ç—Ñ–∏—Ä—É\n"
        "üîä /echo ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–≥–Ω–∞–ª\n"
        "üóí /log ‚Äî –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–µ—Ä–µ–¥–∞—á–∞\n"
        "üîª /pulse ‚Äî –≤—ã–±—Ä–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç\n"
        "üîë /code <–∫–æ–¥> ‚Äî –≤–≤–µ—Å—Ç–∏ —Å–∫—Ä—ã—Ç—ã–π —Å–∏–≥–Ω–∞–ª\n"
        "üóÑ /archive ‚Äî –∞—Ä—Ö–∏–≤ –ª–æ–≥–æ–≤\n"
        "‚úâÔ∏è /cast ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
        "üÜò /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Äî –ò—Å–ø–æ–ª—å–∑—É–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞, —Ç–µ—Ä–º–∏–Ω–∞–ª –ø–æ–π–º—ë—Ç‚Ä¶"
    )

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤–∞—à–µ–º—É –∫–æ–¥—É)
async def send_pulse_keyboard(update, context):
    keyboard = [
        [
            InlineKeyboardButton("–í–ø–µ—Ä—ë–¥", callback_data='pulse_forward'),
            InlineKeyboardButton("–û—Å—Ç–∞—Ç—å—Å—è", callback_data='pulse_stay'),
            InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='pulse_back')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(pick("pulse"), reply_markup=reply_markup)

async def publish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ª–æ–≥–∞.")
        return
    parts = update.message.text.split(maxsplit=1)
    if len(parts) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /publish <—Ç–µ–∫—Å—Ç –ª–æ–≥–∞>")
        return
    log_text = parts[1]
    LOG_HISTORY.append(log_text)
    await update.message.reply_text("–õ–æ–≥ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")

async def log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if LOG_HISTORY:
        last_log = LOG_HISTORY[-1]
        await update.message.reply_text(f"–õ–û–ì# {len(LOG_HISTORY)}\n{last_log}")
    else:
        await update.message.reply_text("–õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

async def archive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_archive_page(update, context, page=0)

async def send_archive_page(update_or_query, context, page=0):
    total = len(LOG_HISTORY)
    if total == 0:
        if hasattr(update_or_query, "message") and update_or_query.message:
            await update_or_query.message.reply_text("–í –∞—Ä—Ö–∏–≤–µ –Ω–µ—Ç –ª–æ–≥–æ–≤.")
        else:
            await update_or_query.edit_message_text("–í –∞—Ä—Ö–∏–≤–µ –Ω–µ—Ç –ª–æ–≥–æ–≤.")
        return
    max_page = (total - 1) // ARCHIVE_PAGE_SIZE
    start = page * ARCHIVE_PAGE_SIZE
    end = min(start + ARCHIVE_PAGE_SIZE, total)
    keyboard = []
    for i in range(start, end):
        button = InlineKeyboardButton(f"–õ–û–ì#{i+1}", callback_data=f"archive_log_{i}")
        keyboard.append([button])
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"archive_page_{page-1}"))
    if page < max_page:
        nav_buttons.append(InlineKeyboardButton("–î–∞–ª—å—à–µ ‚û°Ô∏è", callback_data=f"archive_page_{page+1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = f"–ê—Ä—Ö–∏–≤ –ª–æ–≥–æ–≤. –°—Ç—Ä. {page+1} –∏–∑ {max_page+1}. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å:"
    if hasattr(update_or_query, "message") and update_or_query.message:
        await update_or_query.message.reply_text(text, reply_markup=reply_markup)
    else:
        await update_or_query.edit_message_text(text, reply_markup=reply_markup)

async def archive_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("archive_log_"):
        idx = int(data.split("_")[-1])
        if 0 <= idx < len(LOG_HISTORY):
            log_text = LOG_HISTORY[idx]
            await query.edit_message_text(f"–õ–û–ì#{idx+1}\n{log_text}")
        else:
            await query.edit_message_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    elif data.startswith("archive_page_"):
        page = int(data.split("_")[-1])
        await send_archive_page(query, context, page)

async def pulse_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice_map = {
        'pulse_forward': "–ú–∞—Ä—à—Ä—É—Ç: –í–ø–µ—Ä—ë–¥. –ú–Ω–µ–Ω–∏–µ —É—á—Ç–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É.",
        'pulse_stay': "–ú–∞—Ä—à—Ä—É—Ç: –û—Å—Ç–∞—Ç—å—Å—è. –†–µ—à–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.",
        'pulse_back': "–ú–∞—Ä—à—Ä—É—Ç: –í–µ—Ä–Ω—É—Ç—å—Å—è. –°–∏–≥–Ω–∞–ª –ø—Ä–∏–Ω—è—Ç."
    }
    response = choice_map.get(query.data, "–í—ã–±–æ—Ä –Ω–µ –æ–ø–æ–∑–Ω–∞–Ω.")
    await query.edit_message_text(response)

async def cast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    USER_STATE[user_id] = "awaiting_cast"
    await update.message.reply_text(pick("cast_start"))

async def handle_cast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if USER_STATE.get(user_id) == "awaiting_cast":
        USER_STATE.pop(user_id)
        log_text = update.message.text
        for admin_id in ADMIN_IDS:
            try:
                sender = update.message.from_user.username or user_id
                await context.bot.send_message(
                    admin_id,
                    f"üì• –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –õ–û–ì –æ—Ç @{sender}:\n{log_text}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
        await update.message.reply_text(pick("cast_done"))
        return True
    return False

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().strip()
    user_id = update.message.from_user.id
    if await handle_cast_message(update, context):
        return
    if text in START_ALIASES:
        reply_markup = ReplyKeyboardMarkup(START_REPLY_OPTIONS, resize_keyboard=True)
        await update.message.reply_text(pick("start"), reply_markup=reply_markup)
    elif text in ECHO_ALIASES:
        await update.message.reply_text(pick("echo"))
    elif text in LOG_ALIASES:
        await log(update, context)
    elif text in PULSE_ALIASES:
        await send_pulse_keyboard(update, context)
    elif text.startswith("–∫–æ–¥") or text.startswith("key") or text.startswith("code") or text.startswith("/code"):
        parts = text.split(maxsplit=1)
        if len(parts) == 2 and parts[1].strip().upper() == CODE:
            await update.message.reply_text(pick("code_true"))
        else:
            await update.message.reply_text(pick("code_false"))
    elif text in ARCHIVE_ALIASES:
        await archive(update, context)
    elif text in CAST_ALIASES:
        USER_STATE[user_id] = "awaiting_cast"
        await update.message.reply_text(pick("cast_start"))
    elif text in HELP_ALIASES:
        await help_command(update, context)
    elif text in SCAN_ALIASES:
        await update.message.reply_text("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã... –§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ.")
    else:
        pass

def setup_handlers(application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("echo", echo))
    application.add_handler(CommandHandler("code", code))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("publish", publish))
    application.add_handler(CommandHandler("log", log))
    application.add_handler(CommandHandler("archive", archive))
    application.add_handler(CommandHandler("cast", cast))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(pulse_button, pattern="^pulse_"))
    application.add_handler(CallbackQueryHandler(archive_button, pattern="^archive_"))

TOKEN = os.environ["BOT_TOKEN"]
WEBHOOK_HOST = os.environ.get("WEBHOOK_HOST")
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

app = Flask(__name__)

application = Application.builder().token(TOKEN).build()
setup_handlers(application)

@app.route("/", methods=["GET"])
def home():
    return "OK"

@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(application.initialize())
    loop.run_until_complete(application.process_update(update))
    loop.close()
    return "OK"

def main():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(application.bot.delete_webhook())
    loop.run_until_complete(application.bot.set_webhook(WEBHOOK_URL))
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))

if __name__ == "__main__":
    main()